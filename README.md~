# Human Activity Recognition:

## Prerequisites:

Install Cassandra 2.2.5, for the reference you can use the link.
Install Gradle 2.1, for the reference you can use the link.
Download and Install Spark 1.6.0
	wget http://apache.mirrors.ionfish.org/spark/spark-1.6.0/spark-1.6.0-bin-hadoop2.6.tgz
	tar -zxvf spark-1.6.0-bin-hadoop2.6.tgz
	mv spark-1.6.0-bin-hadoop2.6 spark
	export SPARK_HOME=/home/spark
      	Download and install Scala:
	Download scala from  http://www.scala-lang.org/download/
	tar xvf scala-2.11.7.tar
	mv scala-2.11.7 scala
	$SPARK_HOME/bin/spark-shell 

## Cassandra Settings:
	sudo vim /etc/cassandra/cassandra.yaml
	search start_rpc
	change it to true
	Search for enable_user_defined_functions
	Change it to true
	then restart the cassandra

## Cassandra Database Operations:
	Login to the cassandra CQL shell using the command cqlsh
	This will display 
	Run the following commands
	CREATE KEYSPACE activityrecognition WITH replication = {'class':'SimpleStrategy', 'replication_factor':1};
	USE activityrecognition;
	CREATE TABLE acceleration (   user_id text,   timestamp bigint,   x double,   y double,   z double,   PRIMARY KEY (user_id, timestamp) );
	CREATE TABLE training (   user_id text,   activity text,   timestamp bigint,   x double,   y double,   z double,   PRIMARY KEY ((user_id, activity), timestamp) );
	CREATE TABLE trainingAcceleration (   userID text,   activity text,   timestamp bigint,   x double,   y double,   z double,   PRIMARY KEY ((userid, activity), timestamp) );
	CREATE TABLE result (   user_id text,   timestamp bigint,   prediction text,   PRIMARY KEY (user_id, timestamp) );
	cqlsh> CREATE OR REPLACE FUNCTION state_group_and_count( state map<text, int>, type text ) CALLED ON NULL INPUT RETURNS map<text, int> LANGUAGE java AS ' Integer count = (Integer) state.get(type);  if (count == null) count = 1; else count++; state.put(type, count); return state; ' ;
	cqlsh> CREATE OR REPLACE AGGREGATE group_and_count(text) SFUNC state_group_and_count STYPE map<text, int> INITCOND {};

## Training Data Migration to Cassandra DB:

 copy activityrecognition.trainingAcceleration FROM '/home/kamlendra_sgsits/actitracker-cassandra-spark/data/data.csv' with CHUNKSIZE=100 and NUMPROCESSES=10 and HEADER = true;

Here data.csv is the training data taken from http://www.cis.fordham.edu/wisdm/dataset.php

## Code Execution:
Train the model using the following command:
gradle build && java -jar build/libs/accelerometer-rest-to-cassandra-1.0.jar “TrainModel”
  
      2. Once the model has been trained, we can use the model to predict the behaviour of next set of activity.	
gradle build && java -jar build/libs/accelerometer-rest-to-cassandra-1.0.jar “PredictModel”

## Results:
      The Activity Tracker system determines the user’s activity every 15 seconds and the current activity can be seen either via UI or Mobile application or using the Rest Client using the following URL/parameters:
http://104.197.95.54:8080/activity/acceleration/prediction
Content-Type: application/json
HTTP Request-Method: GET

## Response : <Activity Type> example: Walking

